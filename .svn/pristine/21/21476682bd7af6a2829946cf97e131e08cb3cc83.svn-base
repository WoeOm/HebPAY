<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:p="http://www.springframework.org/schema/p"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:mvc="http://www.springframework.org/schema/mvc"
  xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">
    
    <context:component-scan base-package="heb.pay.controller" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>
	
	<mvc:resources location="/static/" mapping="/static/**" />
	        
   	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
				<property name="supportedMediaTypes">  
		            <list>  
		                <value>text/plain;charset=UTF-8</value>  
		            </list>  
		        </property>
			</bean>
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="supportedMediaTypes">
				   <list>
						<value>text/html;charset=UTF-8</value>
						<value>application/json;charset=UTF-8</value>
				   </list>
				 </property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="ignoreAcceptHeader" value="true" />
		<property name="defaultContentType" value="application/json" />
		<property name="mediaTypes">
			<map>  
                <entry key="xml" value="application/xml"/>  
                <entry key="json" value="text/plain"/>  
                <entry key="xls" value="application/vnd.ms-excel"/>  
            </map>  
		</property>
	</bean>
     
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
		<property name="contentType" value="text/html;charset=UTF-8"></property>
		<property name="order" value="2"></property>
	</bean>
		
	<bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPaths">
			<list>
				<value>/WEB-INF/views/</value>
			</list>
		</property>
		<property name="freemarkerSettings" ref="freemarkerConfiguration"></property>
	</bean>

	<bean id="freemarkerConfiguration" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="location" value="classpath:conf/freemarker.properties" />
	</bean>

	<bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="suffix" value=".html" />
		<property name="contentType" value="text/html;charset=UTF-8" />
		<property name="viewClass" value="heb.pay.manage.freemaker.FreeMarkerView" />
		<property name="exposeSpringMacroHelpers" value="false" />
		<property name="exposeSessionAttributes" value="true" />
		<property name="requestContextAttribute" value="request" />
		<property name="order" value="1"></property>
	</bean>
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<property name="maxInMemorySize" value="4096" />
		<property name="maxUploadSize" value="20971520" />
		<property name="resolveLazily" value="false" />
	</bean>
	
		<bean id="kaptchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<constructor-arg>
					<props>
						<prop key="kaptcha.border">yes</prop>
						<prop key="kaptcha.border.color">105,179,90</prop>
						<prop key="kaptcha.border.thickness">2</prop>
						<prop key="kaptcha.image.width">240</prop>
						<prop key="kaptcha.image.height">160</prop>
						<prop key="kaptcha.session.key">code</prop>
						<prop key="kaptcha.background.clear.from"></prop> 
						<prop key="kaptcha.background.clear.to">white</prop>
						<prop key="kaptcha.textproducer.font.size">100</prop>
						<prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>
						<prop key="kaptcha.textproducer.font.color">255,128,0</prop>
						<prop key="kaptcha.textproducer.char.string">0123456789abcdefghigklmnopqrstuvwxyz</prop>
						<prop key="kaptcha.textproducer.char.length">4</prop>
						<prop key="kaptcha.textproducer.char.space">8</prop>
						<prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.WaterRipple</prop>
						<prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.DefaultNoise</prop>
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean> 
	
	<bean id="shiroKaptchaProducer" class="heb.pay.manage.shiro.ShiroDefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<constructor-arg>
					<props>
						<prop key="kaptcha.textproducer.char.string">0123456789</prop>
						<prop key="kaptcha.textproducer.char.length">6</prop>
						<prop key="kaptcha.textproducer.char.space">12</prop>
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean> 
	
</beans>